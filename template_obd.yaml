AWSTemplateFormatVersion: '2010-09-09'

Description: CloudFormation template to create an S3 bucket with versioning and lifecycle policies

Parameters:
  EnvName: 
    Type: String
    Default: "dev"
    Description: Environnement name
  VPcId: 
    Type: String
    Description: VPC ID for the EC2 instance
    Default: "vpc-0b5f3f9b482b7b7a4"
  
Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${EnvName}-file-metadata-bucket"

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "FileMetadata-${EnvName}"
      AttributeDefinitions:
        - AttributeName: "FileName"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "FileName"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  MysecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${EnvName}-security-group"
      GroupDescription: "Security group for obedbless-instance"
      VpcId: !Ref VPcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 102.64.149.235/24
  
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "learn-function-${EnvName}"
      Role: arn:aws:iam::629193321657:role/lambda-s3-trigger-role
      Runtime: python3.9
      Handler: index.lambda_handler
      Timeout: 30
      MemorySize: 128
      Code:
        ZipFile: |
          import json
          import boto3

          def lambda_handler(event, context):
              s3 = boto3.client('s3')
              dynamodb = boto3.resource('dynamodb')
              table = dynamodb.Table('FileMetadata-dev')

              for record in event['Records']:
                  bucket = record['s3']['bucket']['name']
                  key = record['s3']['object']['key']
                  response = table.put_item(
                      Item={
                          'FileName': key,
                          'BucketName': bucket
                      }
                  )
              return {
                  'statusCode': 200,
                  'body': json.dumps('Hello from Lambda!')
              }

  S3LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub "arn:aws:s3:::${EnvName}-file-metadata-bucket"